<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="module_name">Module 5</string>

    <string name="module_title">Classes</string>

    <string name="tip1">Python is an object oriented programming language.
        Almost everything in Python is an object, with its properties and methods.
        A Class is like an object constructor, or a "blueprint" for creating objects.
    </string>
    <string name="tip2">Create a Class
        To create a class, use the keyword class.
        Example:
        Create a class named MyClass, with a property named x:
        class MyClass:
            x = 5
        Generally, class names are typed with Upper Camel Case.
    </string>

    <string name="tip3">Now we can use the class named MyClass to create objects:
        Example
        Create an object named p1, and print the value of x:

        p1 = MyClass()
        print(p1.x)
    </string>

    <string name="tip4">The __init__() Function
        The examples above are classes and objects in their simplest form, and are not
        really useful in real life applications.

        To understand the meaning of classes we have to understand the built-in __init__() function.

        All classes have a function called __init__(), which is always executed when the class
        is being initiated.

        Use the __init__() function to assign values to object properties, or other
        operations that are necessary to do when the object is being created.

        Example: Create a class named Person, use the __init__() function to assign
        values for name and age.
    </string>

    <string name="tip5">Objects can also contain methods. Methods in objects are functions
        that belong to the object.

        Let us create a method in the Person class.
        Example: Insert a function (method) that prints a greeting, and execute it on the p1 object.
    </string>

    <string name="tip6">The self parameter is a reference to the current instance of the class,
        and is used to access variables that belongs to the class.

        It does not have to be named self , you can call it whatever you like, but it has to be
        the first parameter of any function in the class. Common practice however, is to have it
        be named self to avoid any confusion.
        Example: Use the words whoami and python instead of self.
    </string>
    <string name="tip7">You can modify properties on objects like this:

        Example: Set the age of p1 to 40 by calling the object and method and using the
        '=' sign to set the value.

p1.age = 40</string>
    <string name="tip8">Class definitions cannot be empty, but if you for some reason have a
        class definition with no content, put in the pass statement to avoid getting an error.
    </string>

</resources>