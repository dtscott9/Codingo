<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="module_name">Module 5</string>

    <string name="module_title">Classes</string>

    <string name="tip1">Python is an object oriented programming language.
        Almost everything in Python is an object, with its properties and methods.
        A Class is like an object constructor, or a "blueprint" for creating objects.
        To create a class, use the keyword class.
        Generally, class names are typed with Upper Camel Case.
        \n\nExample:
        Create a class named MyClass, with a property named x:\n\n
        class MyClass:
            x = 5\n\n

        Now we can use the class named MyClass to create objects.
        To create an object named p1 and print the value of x, type:\n\n

        p1 = MyClass()\n
        print(p1.x)
    </string>

    <string name="tip2">The __init__() Function
        The examples above are classes and objects in their simplest form, and are not
        really useful in real life applications.

        To understand the meaning of classes we have to understand the built-in __init__() function.

        All classes have a function called __init__(), which is always executed when the class
        is being initiated.

        Use the __init__() function to assign values to object properties, or other
        operations that are necessary to do when the object is being created.\n\n

        The self parameter is a reference to the current instance of the class,
        and is used to access variables that belongs to the class.

        It does not have to be named self , you can call it whatever you like, but it has to be
        the first parameter of any function in the class. Common practice however, is to have it
        be named self to avoid any confusion.\n\n

        Example: Create a class named Person, use the __init__() function to assign
        values for name and age.
        </string>

    <string name="tip3">Objects can also contain methods. Methods in objects are functions
        that belong to the object.

        Let us create a method in the Person class.
        Example: Insert a function (method) that prints a greeting, and execute it on the p1 object.
    </string>

    <string-array name="module_5_questions">
        <!--All of the questions and answer choices are stored into one string-array.-->
        <item>How do you create a class?</item> <!-- Question 1-->
        <item>new Class: MyCLass</item> <!-- Answer choice 1-->
        <item>class: MyClass</item> <!-- Answer choice 2-->
        <item>python.class = MyClass</item> <!-- Answer choice 3-->
        <item>fun class()</item> <!-- Answer choice 4-->
        <item>class: MyClass</item> <!-- Answer -->

        <item>How do you instantiate an object of one of your classes?</item> <!-- Next question -->
        <item>x = MyClass()</item>
        <item>new Object from MyClass = x</item>
        <item>fun MyClass() = new.x</item>
        <item>x = new MyClass()</item>
        <item>x = MyClass()</item>

        <item>How do you create a method in a class that does nothing?</item> <!-- Next question -->
        <item>mymethod() {Pass = True}</item>
        <item>MyClass.mymethod.pass()</item>
        <item>def mymethod() {skip}</item>
        <item>def mymethod() {pass}</item>
        <item>def mymethod() {pass}</item>

        <item>What does the __init__() function do?</item> <!-- Next question -->
        <item>Tells the class where to go to get data to populate an object.</item>
        <item>Lets the program run. Without the __init__() function, the program will crash.</item>
        <item>Assigns values to object properties, or other operations that are necessary
            to do when the object is being created.</item>
        <item>Creates an instance of the object.</item>
        <item>Assigns values to object properties, or other operations that are necessary
            to do when the object is being created.</item>

    </string-array>


</resources>